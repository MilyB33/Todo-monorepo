# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Auth {
  token: String
  user: User
}

type Collection {
  _id: String!
  color: String!
  iconUrl: String!
  name: String!
  owner: User!
  tasks: [Task!]
}

type CollectionResponse {
  data: OneCollection
  message: String!
}

type Collections {
  collections: [Collection!]
}

type CollectionsResponse {
  data: Collections
  message: String!
}

input CreateCollectionInput {
  color: String!
  iconUrl: String!
  name: String!
  owner: ObjectId!
}

input CreateTaskInput {
  collectionId: ObjectId!
  date: String!
  description: String!
}

input CreateUserInput {
  email: String!
  password: String!
  username: String!
}

type Image {
  createdAt: String!
  customCoordinates: String
  fileId: String!
  filePath: String!
  fileType: String!
  isPrivateFile: Boolean!
  name: String!
  tags: [String!]
  thumbnail: String!
  type: String!
  url: String!
}

type ImageResponse {
  data: Images
  message: String!
}

type Images {
  images: [Image!]!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createCollection(input: CreateCollectionInput!): CollectionResponse!
  createTask(input: CreateTaskInput!): TaskResponse!
  deleteTask(input: TaskIDInput!): TaskResponse!
  login(input: LoginInput!): UserAuthResponse!
  register(input: CreateUserInput!): OnlyMessageResponse!
  updatePassword(input: UpdatePasswordInput!): OnlyMessageResponse!
  updateTask(input: UpdateTaskInput!): TaskResponse!
}

"""Mongo object id scalar type"""
scalar ObjectId

type OneCollection {
  collection: Collection
}

type OneTask {
  task: Task
}

type OnlyMessageResponse {
  message: String!
}

type Query {
  getCollections: CollectionsResponse!
  getImages(input: SearchImageInput!): ImageResponse!
  getTask(input: TaskIDInput!): TaskResponse!
  getTasks: TasksResponse!
  me: UserAuthResponse!
}

input SearchImageInput {
  name: String
  path: String
}

type Task {
  _id: ObjectId!
  completed: Boolean!
  date: String!
  description: String!
  owner: User!
}

input TaskIDInput {
  _id: ObjectId!
}

type TaskResponse {
  data: OneTask
  message: String!
}

type Tasks {
  tasks: [Task!]
}

type TasksResponse {
  data: Tasks
  message: String!
}

input UpdatePasswordInput {
  _id: ObjectId!
  newPassword: String!
  password: String!
}

input UpdateTaskInput {
  _id: ObjectId!
  completed: Boolean
  date: String
  description: String
}

type User {
  _id: ObjectId!
  email: String!
  username: String!
}

type UserAuthResponse {
  data: Auth
  message: String!
}
